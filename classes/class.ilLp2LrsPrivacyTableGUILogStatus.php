<?php
/* Copyright (c) internetlehrer GmbH, Extended GPL, see LICENSE */

use ILIAS\DI\Container;

/**
 * class ilLp2LrsPrivacyTableGUILogStatus
 *
 * @author Uwe Kohnle <kohnle@internetlehrer-gmbh.de>
 * @version $Id$
 */ 
class ilLp2LrsPrivacyTableGUILogStatus extends ilTable2GUI
{
    /** @var ilLp2LrsPrivacyPlugin $plugin_object */
    protected $plugin_object;

    /** @var Container $dic */
    private $dic;
    /**
     * @var ilDBInterface $db
     */
    private $db;

    /** @var array */
    protected $filter = array();

    /**
     * Constructor
     *
     * @param object        parent object
     * @param string $a_parent_cmd
     * @param string $a_template_context
     * @throws ilPluginException
     */
    function __construct($a_parent_obj, $a_parent_cmd = '', $a_template_context = '') 
    {
    	// this uses the cached plugin object
		$this->plugin_object = ilPlugin::getPluginObject(IL_COMP_SERVICE, 'UIComponent', 'uihk', 'Lp2LrsPrivacy');
		parent::__construct($a_parent_obj, $a_parent_cmd, $a_template_context);

		global $DIC; /** @var Container $DIC */

		$this->dic = $DIC;
		$this->db = $this->dic->database();
        $this->setId('xlpp');
    }

    /**
     * Init the table with some configuration
     *
     *
     * @access public
     * @param $a_parent_obj
     */
    public function init($a_parent_obj, $resetFilter = false)
    {
        global $ilCtrl, $lng;

        $this->addColumn($lng->txt('date'), 'log_date', '10%');
        $this->addColumn($lng->txt('status'), 'status', '10%');
        $this->addColumn($lng->txt('user'), 'user', '30%');
        $this->addColumn($lng->txt('crs'), 'crs', '40%');

        $this->setDefaultOrderField('log_date');
        $this->setDefaultOrderDirection('asc');

        $this->setEnableHeader(true);
        $this->setFormAction($ilCtrl->getFormAction($a_parent_obj, 'applyFilter'));

        if( $resetFilter ) {
            $this->resetOffset();
            $this->resetFilter();
            ilSession::clear('xlpp_form');
        }
        $this->initFilter();
        $this->setFilterCommand("applyFilter");
        $this->setTopCommands(true);

        $this->setRowTemplate('tpl.xlpp_log_status_row.html', $this->plugin_object->getDirectory());
        $this->getMyDataFromDb();
    }

    public function initFilter()
    {
        parent::initFilter(); // TODO: Change the autogenerated stub
        $lng = $this->dic['lng'];

        // FILTER USER (autoComplete: User name, login, email filter)
        include_once("./Services/Form/classes/class.ilTextInputGUI.php");
        $ul = new ilTextInputGUI($lng->txt("login") . "/" . $lng->txt("email") . "/" .
            $lng->txt("name"), "query");
        $ul->setDataSource($this->dic->ctrl()->getLinkTarget(
            $this->getParentObject(),
            "userAutoComplete",
            "",
            true
        ));
        $ul->setSize(20);
        $ul->setSubmitFormOnEnter(true);
        $this->addFilterItem($ul);

        // FILTER CURRENT STATUS ONLY
        #$cb = new ilCheckboxInputGUI('show_curr_status_only', 'currStatusOnly');
        #$this->addFilterItem($cb);
    }

    /**
     * Get data and put it into an array
     */
    function getMyDataFromDb() 
    {
        $data = [];
        $query = 'SELECT * FROM uihk_xlpp_log';
        $whereUser = null;
        $userQuery =
        $userId =
        $onlyCurrStatus = '';

        $filter = ilSession::get('form_xlpp') ?? [
                'query' => serialize(''),
                'currStatusOnly' => serialize('')
            ]; # $_SESSION["form_xlpp"];
        if( !is_null($filter) ) {
            $filter = array_map(function ($val) {
                return unserialize($val);
            }, $filter);
        }

        if( !isset($_POST['cmd']['resetFilter']) && (isset($_POST['query']) || isset($_POST['currStatusOnly']))  ) {
            $filter['query'] = filter_var($_POST['query'], FILTER_SANITIZE_STRING);
            $filter['currStatusOnly'] = filter_var($_POST['currStatusOnly'], FILTER_SANITIZE_STRING);

            ilSession::set('form_xlpp', [
                'query' => serialize($filter['query']),
                'currStatusOnly' => serialize($filter['currStatusOnly']),
            ]);

            $userQuery = $filter['query'];
            $onlyCurrStatus = $filter['currStatusOnly'];
        }

        if( isset($_GET['xlpp_table_nav']) ) {
            $userQuery = $_POST['query'];
            $onlyCurrStatus = $_POST['currStatusOnly'];
        }



        if( (bool)strlen($userQuery) ) {
            $userId = (int)ilObjUser::_lookupId($userQuery);
            $whereUser = ' WHERE usr_id = ' . $this->db->quote($userId, 'integer');
        }

        if( $onlyCurrStatus ) {
            $in = [];
            $query = 'SELECT DISTINCT ref_id FROM uihk_xlpp_log GROUP BY ref_id';
            $res = $this->db->query($query);
            while($row = $this->db->fetchAssoc($res)) {
                $in[] = $row['ref_id'];
            }
            foreach ($in as $refId )  {
                $query = 'SELECT * FROM uihk_xlpp_log' . ($whereUser ?? ' WHERE usr_id IS NOT NULL') . ' AND ref_id = ' . $this->db->quote($refId, 'integer') . ' ORDER BY log_date DESC LIMIT 1';
                #echo $query; exit;
                $res = $this->db->query($query);
                while($row = $this->db->fetchAssoc($res) ) {
                    if( (bool)$row['usr_id'] ) {
                        $data[] = $row;
                    }
                }

                #echo $whereUser . ': ' . (bool)$data[$refId]['usr_id'] . '<br />';
            }
            #exit;
        } else {
            $res = $this->db->query($query . $whereUser ?? '');
            while($row = $this->db->fetchAssoc($res)) {
                #var_dump($row); exit;
                $data[] = $row;
            }
        }
        $this->setData($data);
    }

    /**
     * Fill a single data row.
     */
    protected function fillRow($a_set) 
    {
        global $lng, $ilCtrl;

        #$ilCtrl->setParameter($this->parent_obj, 'type_id', $a_set['type_id']);
        $this->tpl->setVariable('LOG_DATE', $a_set['log_date']);
        $this->tpl->setVariable('STATUS', $this->lng->txt(($a_set['status'] ? 'en' : 'dis') .'abled'));
        $this->tpl->setVariable('USER', ilObjUser::_lookupLogin($a_set['usr_id']) . ', ' . ilObjUser::_lookupFullname($a_set['usr_id']));
        $this->tpl->setVariable('COURSE', ilObject::_lookupTitle(ilObject::_lookupObjectId($a_set['ref_id'])));
    }

}

?>